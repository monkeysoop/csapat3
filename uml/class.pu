@startuml class
skinparam classAttributeIconSize 0

class App <<partial>> {
    - <<const>> SIDELENGTH : double = 20
    - XLength : int
    - YLength : int
    - Step : int <<get>>
    - _simWindow : SimulationWindow?
    - _startWindow : StartWindow?
    - _replayWindow : ReplayWindow?
    - _viewModel : ViewModel.ViewModel?
    - _mouseDoubleClickHandler : MouseButtonEventHandler?
    - _onSizeChangedHandler : SizeChangedEventHandler?
    - _onLoadedHandler : EventHandler?
    - _loaded : bool
    - _ctrlDown : bool
    - _selectedRobot : Robot?
    - _mousePos : Point
    - _rectangle : ImageBrush
    - _robots : Dictionary<Robot, Grid>
    - _targets : Dictionary<Robot, Grid>
    + App()
    - StartWindow() : void
    - ReplayButton_Click(sender:object, e:RoutedEventArgs) : void
    - SimButton_Click(sender:object, e:RoutedEventArgs) : void
    - DisposeStartWindow() : void
    - DisposeWindow(window:object?) : void
    - OpenReplay() : bool
    - OpenSim() : bool
    - {static} DisplayLoading(w:Window) : void
    - Calculate(c:Canvas) : void
    - Redraw() : void
    - DrawGrid(c:Canvas) : void
    - InitRobots(c:Canvas) : void
    - {static} RotateBitmap(bmp:Bitmap, angle:float) : void
    - DrawElements() : void
    - OnTick(sender:object?, e:EventArgs) : void
    - OnPropertyChanged(sender:object?, e:PropertyChangedEventArgs) : void
    - OnKeyDown(sender:object, e:KeyEventArgs) : void
    - OnKeyUp(sender:object, e:KeyEventArgs) : void
    - OnMouseWheel(sender:object, e:MouseWheelEventArgs) : void
    - OnMouseMove(sender:object, e:MouseEventArgs) : void
    - OnManipulationDelta(sender:object?, e:ManipulationDeltaEventArgs) : void
    - OnSizeChanged(canvas:Canvas) : void
    - OnLoaded(window:Window, canvas:Canvas) : void
    - OnEnded(sender:object?, e:EventArgs) : void
    - {static} Exception(_:object?, exception:System.Exception) : void
}

Application <|-- App

class Board {
    + <<const>> EMPTY : int = 0
    + <<const>> WALL : int = 1
    + <<const>> OCCUPIED : int = 1
    + <<const>> NOT_SEARCHED : int = 0
    + <<const>> SEARCHED : int = 1
    + <<const>> MAX_PATH_LENGTH_FACTOR : int = 20
    + MaxPathLength : int <<get>> <<init>>
    + Height : int <<get>> <<init>>
    + Width : int <<get>> <<init>>
    + Board(height:int, width:int)
    + Board(data:int[,], height:int, width:int)
    + TryMoveRobot(currentPosition:Point, nextPosition:Point) : bool
    + UnReserve(position:Point, cost:int) : void
    + Reserve(position:Point, cost:int) : void
    + NotReservedForward(nextPosition:Point, cost:int) : bool
    + NotReservedLeftRight(currentPosition:Point, nextPosition:Point, cost:int) : bool
    + SetSearchedIfEmptyForward(nextPosition:Point, cost:int) : bool
    + SetSearchedIfEmptyLeftRight(currentPosition:Point, nextPosition:Point, cost:int) : bool
    + SetSearchedIfEmptyBackward(currentPosition:Point, nextPosition:Point, cost:int) : bool
    + SetSearchedIfEmptyStart(currentPosition:Point, cost:int) : bool
    + Searchable(position:Point) : bool
    + ClearMask() : void
    + SetValue(x:int, y:int, value:int) : void
    + GetValue(x:int, y:int) : int
    + GetSearchMaskValue(x:int, y:int) : int
    + SetSearchMaskValue(x:int, y:int, value:int) : void
    + GetRobotMaskValue(x:int, y:int) : int
    + SetRobotMaskValue(x:int, y:int, value:int) : void
    - AddBorder() : void
    - CheckPosition(position:Point) : void
    - CheckPosition(x:int, y:int) : void
    - {static} CheckCost(cost:int) : void
    - {static} CheckValue(value:int) : void
}

class Config {
    + <<required>> MapFile : string <<get>> <<set>>
    + <<required>> AgentFile : string <<get>> <<set>>
    + <<required>> TaskFile : string <<get>> <<set>>
    + TeamSize : int <<get>> <<set>>
    + NumTasksReveal : int <<get>> <<set>>
    + Config()
    <<internal>> GetAssigner(board:Board, tasks:Package*, robots:Robot*) : Assigner?
}

Config --> "TaskAssignmentStrategy" Strategy

interface IBoardDataAccess {
    <<internal>> LoadAsync(path:string) : Task<Board>
    <<internal>> SaveAsync(path:string, board:Board) : Task
}
interface IConfigDataAccess {
    + LoadAsync(path:string) : Task<Config>
}
interface ILogFileDataAccess {
    LoadAsync(path:string) : Task<LogFile>
    SaveAsync(path:string, logFile:LogFile) : Task
}
interface IPackagesDataAccess {
    <<internal>> LoadAsync(path:string, width:int, height:int) : Package*
}
interface IReplayDataAccess {
}
IReplayDataAccess --> "BoardDataAccess" IBoardDataAccess
IReplayDataAccess --> "LogFileDataAccess" ILogFileDataAccess
interface IRobotsDataAccess {
    <<internal>> LoadAsync(path:string, width:int, height:int) : Robot*
}
interface ISimDataAccess {
}
ISimDataAccess --> "ConfigDataAccess" IConfigDataAccess
ISimDataAccess --> "BoardDataAccess" IBoardDataAccess
ISimDataAccess --> "PackagesDataAccess" IPackagesDataAccess
ISimDataAccess --> "RobotsDataAccess" IRobotsDataAccess
ISimDataAccess --> "LogFileDataAccess" ILogFileDataAccess
class LogFile {
    + ActionModel : string <<get>> <<set>>
    + ActualPaths : Action*
    + AllValid : bool <<get>> <<set>>
    + Errors : (int, int, int, string)*
    + Events : (int, int, string)*
    + TeamSize : int <<get>> <<set>>
    + Makespan : int <<get>> <<set>>
    + NumTaskFinished : int <<get>> <<set>>
    + PlannerPaths : Action*
    + PlannerTimes : double*
    + Start : (Point, Direction)*
    + SumOfCost : int <<get>> <<set>>
    + Tasks : (int, int, int)*
    + LogFile()
}

enum Action {
    F,
    R,
    C,
    W,
    T,
    B,
}

class ActionMethods <<static>> {
    + {static} Reverse(action:Action) : Action
}

enum Direction {
    North= 0,
    East= 1,
    South= 2,
    West= 3,
}

class DirectionMethods <<static>> {
    + {static} GetOffset(direction:Direction) : Point
    + {static} GetOffset(direction:int) : Point
    + {static} GetNewOffsetPoint(direction:Direction, point:Point) : Point
    + {static} ClockWise(original:Direction) : Direction
    + {static} CounterClockWise(original:Direction) : Direction
    + {static} Opposite(original:Direction) : Direction
    <<internal>> {static} Parse(direction:string) : Direction
}

class Logger {
    - <<readonly>> _fileName : string
    + Logger(mapName:string)
    + SetActionModel(model:string) : void
    + SetTeamSize(size:int) : void
    + LogStarts(robots:Robot*) : void
    + LogActualPaths(robots:Robot*) : void
    + LogActualPath(iD:int, action:Action) : void
    + LogPlannerPaths(robotID:int, plannedPath:Path) : void
    + LogPlannerPaths(robotID:int, step:Action) : void
    + LogTime(time:double) : void
    + LogError(robot1:int, robot2:int, time:int, eventName:string) : void
    + LogError(time:int, eventName:string) : void
    + LogAssignment(robotID:int, taskID:int, when:int) : void
    + LogFinish(robotID:int, taskID:int, when:int) : void
    + LogTask(package:Package) : void
    + LogTasks(tasks:Package*) : void
    + LogReplayLength(length:int) : void
    + <<async>> SaveAsync(access:ILogFileDataAccess) : Task
    + GetLogFile() : LogFile
    - LogEvent(robotID:int, taskID:int, when:int, eventName:string) : void
}
Logger --> "_logFile" LogFile
class Package <<sealed>> {
    - {static} IDCounter : int = 1
    + ID : int <<get>>
    + Position : Point <<get>>
    + Package(p:Point)
    + Package(x:int, y:int)
    <<internal>> {static} ResetIDCounter() : void
}

class Path {
    - _ind : int = 0
    + PlannedPath : Action* <<readonly>>
    + <<readonly>> Target : Point?
    + IsOver : bool <<get>>
    + Path(path:Action*, target:Point?)
    <<internal>> PeekNext() : Action
    <<internal>> Increment() : void
    + Next() : Action
    <<internal>> FreeAllReserved(board:Board, current_position:Point, currentDirection:Direction, current_cost:int) : bool
    <<internal>> Alter(t:Action) : void
}
Path "0..*" o-- "_path" Action

class Robot <<sealed>> {
    - {static} IDCounter : int = 1
    + Robot(position:Point, direction:Direction)
    + ID : int <<get>>
    + Position : Point <<get>>
    + History : Action* <<readonly>>
    + RemoveTask() : Package
    + AddTask(p:Point?) : void
    + AddTask(p:Package?) : void
    + TryStep(a:Action, board:Board, cost_counter:int) : bool
    + Step(a:Action) : void
    <<internal>> {static} ResetIDCounter() : void
}

Robot "0..*" o-- "_history" Action
Robot --> "Direction" Direction
Robot --> "Task" Package

struct Step {
    + Direction : int <<get>> <<init>>
    + Heuristic : int <<get>> <<init>>
}
Step o-> "Position" Point
enum Strategy {
    RoundRobin,
}
class Wall <<sealed>> {
    + Wall(x:Point)
    + Wall(x:int, y:int)
}
Wall --> "Position" Point
class ReplayWindow <<partial>> {
    + ReplayWindow()
}
Window <|-- ReplayWindow
class SimulationWindow <<partial>> {
    + SimulationWindow()
}
Window <|-- SimulationWindow
class StartWindow <<partial>> {
    + StartWindow()
}
Window <|-- StartWindow

class ReplayViewModel {
    + CurrentTime : int <<get>> <<set>>
    + ReplayLength : int <<get>>
    + TimeLabel : string <<get>> <<set>>
    + LengthLabel : string <<get>>
    + Backward : ICommand
    + ReplayViewModel(logPath:string, mapPath:string)
    - OnLoaded(sender:object?, e:EventArgs) : void
    - OnTick(sender:object?, e:EventArgs) : void
}
ViewModel <|-- ReplayViewModel
ReplayViewModel --> "RepController" ReplayController
class SimulationViewModel {
    +  <<event>> Ended : EventHandler? 
    + LogSave : ICommand
    + SimulationViewModel(path:string, pathfinder:Type, speed:double, length:int)
    + AssignTask(selectedRobot:Robot, x:int, y:int) : void
    + Dispose() : void
}
ViewModel <|-- SimulationViewModel
SimulationViewModel --> "_simulationController" SimulationController
abstract class ViewModel {
    - <<const>> MINZOOM : double = .3
    - <<const>> MAXZOOM : double = 2
    - _zoom : double = 1
    + Width : int <<get>>
    + Height : int <<get>>
    + Zoom : double <<get>> <<set>>
    + SpeedLabel : string <<get>>
    + IsOver : bool <<get>>
    + Robots : Robot* <<readonly>>
    + Walls : Wall* <<readonly>>
    +  <<event>> Tick : EventHandler? 
    +  <<event>> Loaded : EventHandler? 
    +  <<event>> Exception : EventHandler<System.Exception>? 
    + Play : ICommand
    + Pause : ICommand
    + Forward : ICommand
    + SpeedDown : ICommand
    + SpeedUp : ICommand
    # ViewModel(controller:Controller)
    - OnException(sender:object?, e:System.Exception) : void
    # OnLoaded(sender:object?) : void
    - ChangeSpeed(speed:double) : void
    # OnTick(sender:object?) : void
    <<internal>> Toggle() : void
}
ViewModelBase <|-- ViewModel
ViewModel --> "Controller" Controller

abstract class ViewModelBase {
    +  <<event>> PropertyChanged : PropertyChangedEventHandler? 
    # <<virtual>> OnPropertyChanged(propertyName:string?) : void
}
INotifyPropertyChanged <|-- ViewModelBase
abstract class Assigner {
    + <<virtual>> NoPackage : bool <<get>>
    # Assigner(board:Board, packages:Package*, robots:Robot*)
    + {abstract} Peek(robot:Robot, package:Package) : bool
    + {abstract} Get(robot:Robot, package:Package) : bool
    + <<virtual>> Return(package:Package) : void
}

Assigner --> "_board" Board
Assigner "0..*" o-- "- _packages" Package
Assigner "0..*" o-- "- _robots" Robot

class RoundRobinAssigner {
    - _packages : ConcurrentQueue<Package>
    + RoundRobinAssigner(board:Board, packages:Package*, robots:Robot*)
    + <<override>> NoPackage : bool <<get>>
    + <<override>> Peek(_:Robot, package:Package) : bool
    + <<override>> Get(_:Robot, package:Package) : bool
    + <<override>> Return(package:Package) : void
}

Assigner <|-- RoundRobinAssigner

abstract class Controller {
    - _interval : TimeSpan
    # Interval : TimeSpan <<get>>
    # Timer : Timer
    + IsOver : bool <<get>> <<protected set>>
    + IsPlaying : bool <<get>> <<protected set>>
    + Speed : double <<get>> = 1
    + Width : int <<get>>
    + Height : int <<get>>
    + Robots : Robot* <<readonly>>
    + Walls : Wall* <<readonly>>
    +  <<event>> Exception : EventHandler<System.Exception>? 
    +  <<event>> Tick : EventHandler? 
    +  <<event>> Loaded : EventHandler? 
    # Controller(speed:double)
    # Controller()
    # {abstract} OnTick(state:object?) : void
    # OnLoaded(sender:object?) : void
    # CallTick(sender:object?) : void
    # LoadWalls() : void
    # OnException(sender:object?, e:System.Exception) : void
    + ChangeSpeed(speed:double) : void
    + <<virtual>> Play() : void
    + <<virtual>> Pause() : void
    + {abstract} StepForward() : void
}

Controller "0..*" o-- "_robots" Robot
Controller "0..*" o-- "_walls" Wall
Controller --> "_interval" TimeSpan

class ReplayController <<sealed>> {
    - Paths : ConcurrentDictionary<Robot, Action*>
    - Targets : ConcurrentDictionary<Robot, IntervalTree<Point>>
    + TimeStamp : int <<get>>
    + Length : int <<get>>
    + ReplayController(logPath:string, mapPath:string, dataAccess:IReplayDataAccess)
    - <<async>> Load(logPath:string, mapPath:string, dataAccess:IReplayDataAccess) : void
    # <<override>> OnTick(state:object?) : void
    + JumpTo(time:int) : void
    + <<override>> StepForward() : void
    + StepBackward() : void
}

Controller <|-- ReplayController

class SimulationController <<sealed>> {
    - _assigner : Assigner.Assigner?
    - _cancellationTokenSource : CancellationTokenSource?
    - _paths : ConcurrentDictionary<Robot, Path>
    - <<readonly>> _length : double
    + TimeStamp : int <<get>>
    +  <<event>> Ended : EventHandler? 
    + SimulationController(path:string, dataAccess:ISimDataAccess, pathFinder:Type, speed:double, length:int)
    + SimulationController(path:string, dataAccess:ISimDataAccess, pathFinder:Type, speed:double)
    - OnEnded() : void
    - <<async>> Load(path:string, da:ISimDataAccess) : void
    + <<async>> SaveLog() : void
    # <<override>> OnTick(state:object?) : void
    + <<override>> StepForward() : void
    - Assign(robot:Robot) : Path
    - Free(robot:Robot, path:Path) : void
    + Assign(robot:Robot, target:Point) : void
    + Dispose() : void
}
Controller <|-- SimulationController
SimulationController o-- "_pathFinder" PathFinder
SimulationController --> "_logger" Logger
SimulationController --> "_logFileDataAccess" ILogFileDataAccess

class AStar <<sealed>> {
    # <<override>> FindPath(board:Board, startPosition:Point, startDirection:int, endPosition:Point, startCost:int) : (bool, int[], int[])
}
PathFinder <|-- AStar

class BFS <<sealed>> {
    # <<override>> FindPath(board:Board, startPosition:Point, startDirection:int, endPosition:Point, startCost:int) : (bool, int[], int[])
}
PathFinder <|-- BFS

class DFS <<sealed>> {
    # <<override>> FindPath(board:Board, startPosition:Point, startDirection:int, endPosition:Point, startCost:int) : (bool, int[], int[])
}
PathFinder <|-- DFS

abstract class PathFinder {
    + CalculatePath(board:Board, startPosition:Point, startDirection:int, endPosition:Point, startCost:int) : (bool, Action*)
    - {static} TracePath(parentsBoard:int[], costsBoard:int[], board:Board, start:Point, end:Point) : Action*
    # {abstract} FindPath(board:Board, start_position:Point, startDirection:int, end_position:Point, start_cost:int) : (bool, int[], int[])
    # {static} ManhattanDistance(start:Point, end:Point) : int
    # {static} MaxTurnsRequired(position:Point, direction:Point, end:Point) : int
    # {static} CheckHeap(heap:Step[], length:int, heapHashMap:int[], width:int) : void
    # {static} HeapInsert(heap:Step[], length:int, item:Step, heapHashMap:int[], width:int) : void
    # {static} HeapRemoveMin(heap:Step[], length:int, heapHashMap:int[], width:int) : Step
    # {static} UpdateHeapItem(heap:Step[], length:int, item:Step, heapHashMap:int[], width:int) : void
}
@enduml
