@startuml ClassDiagram
skinparam classAttributeIconSize 0


package "View" {
    class App {}
    class SimulationWindow {}
    class ReplayWindow {}
}

package "ViewModel" {
    class ViewModelBase <<abstract>> {}
    class SimulationWindowViewModel {
        +Play : ICommand
        +ChangeTarget : ICommand
    }
    class ReplayWindowViewModel {
        +Play : ICommand
        +Pause : ICommand
        +Resume : ICommand
        +Jump : ICommand
    }
}

package "Persistence" {
    class Config {
        -mapFile : string
        -agentFile : string
        -teamSize : int
        -taskFile : string
        -numTasksReveal : int
        -taskAssignmentStrategy : string
        {static} +Load(path : string) : Config
    }

    class Board {
        -Type : string
        +Width : int
        +Height : int
        +Map : IMapObject[,]
        {static} +Load(path : string) : Board
        +this[int x, int y]() : IMapObject {operator}
    }
    
    class LogFile {
        -Events : IEvent*
        -Errors : Error*
        -PlannerTimes : double*
        -previous : DateTime
        +LogError(r1, r2, t : int, msg : string)
        +LogEvent(event : IEvent)
        +Save(path : string)
        {static} +Load(path : string)
    }
}

package "Simulation" {
    interface IMapObject {}

    class Wall <<singleton>> {}

    class RobotController <<abstract>> {
        #Board : Board
        #Robots : Robot*
        #CalculatedPaths : Dictonary<Robot, Action*>
        +RobotController(b : Board, r : Robot*)
        #CalculatePath() {async, abstract}
        +MoveRobots() {async?}
        -Check(i, j : int) : bool
    }

    class DFSController {}

    class Robot {
        +Id : int {readonly}
        +Start : int x int {readonly}
        +Position : int x int
        +Direction : Direction
        +Task : Task
        +History : Action*
        +Robot(x, y, i, j : int, wh : SimulationController)
        +Robot(x, y, i, j : int, wh : ReplayController)
        +Step(a : Action)
        +Jump(t: int)
        +Assign(task : Task)
        +ChangeTarget()
    }

    class Task {
        +Id : int {readonly}
        +Goal : int x int {readonly}
        +Assigned : bool {readonly}
        +Robot : Robot? {readonly}
        ~Assign(r : Robot)
        ~Unassign()
    }

    class ReplayController {
        +Robots : Robot*
        +PlayBackSpeed : int
        +Scheduler : Timer
        +TimeStamp : int
        +ReplayController(path : string)
        +Pause()
        +Resume()
        +Jump(t : int)
    }

    class SimulationController {
        +Tasks : Task*
        +Robots : Robot*
        +Tick : EventHandler
        +SumCost : AtomicInteger
        +SumTime : AtomicInteger
        +Scheduler : Timer
        +SimulationEnded : EventHandler
        +SimulationController(path : string)
        +ChangeTarget(r, t : int)
        -OnTick(sender : object?, e : EventArgs)
    }

    enum Action {
        F, R, C, W, T
    }

    enum Direction {
        north, east, south, west

        {static}+ClockWise() : Direction {extension}
        {static}+CounterClockWise() : Direction {extension}
    }

    class Event <<abstract>> {
        +TaskId : int
        +Step : int
    }
    
    class AssignmentEvent {
        +ToString() : string {override}
    }

    class FinishedEvent {
        +ToString() : string {override}
    }

    class Error {
        +R1Id : int {readonly}
        +R2Id : int {readonly}
        +Step : int {readonly}
        +Type : string {readonly}
    }
}


package "Tests" {
    class SimulationTests {}
    class ReplayTests {}
    class BotTests {}
}

App o-- SimulationWindow
App o-- ReplayWindow

ViewModelBase <|-up- SimulationWindowViewModel
ViewModelBase <|-up- ReplayWindowViewModel

SimulationWindow o-- SimulationWindowViewModel
ReplayWindow o-- ReplayWindowViewModel

SimulationWindowViewModel o-down- SimulationController
ReplayWindowViewModel o-down- ReplayController

SimulationController -right- SimulationTests : tests <
ReplayController -right- ReplayTests : tests <
Robot -right- BotTests : tests <

SimulationController o-up- Config
SimulationController o-up- Board
SimulationController o-up- LogFile

ReplayController o-up- LogFile

IMapObject <|-up- Wall
IMapObject <|-- Robot

Event <|-down- AssignmentEvent
Event <|-down- FinishedEvent

RobotController <|-down- DFSController

SimulationController -- RobotController
ReplayController -- RobotController

@enduml