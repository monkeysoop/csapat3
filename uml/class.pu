@startuml ClassDiagram
skinparam classAttributeIconSize 0

package {
    package "View" {
        class App
        class MainWindow
        class MapEditWindow
        class ConfigEditWindow
    }

    package "ViewModel" {
        class ViewModelBase
        class MainWindowViewModel
        class MapEditWindowViewModel
        class ConfigEditWindowViewModel
    }
}

package {
    package "Persistence" {
        class Config
        class Board
        class LogFile
    }

    package "Simulation" {
        class IMapObject
        class Wall
        class Robot
        class Task

        class WareHouse

        enum Action
        enum Direction
        enum Strategy

        class IEvent
        class AssignmentEvent
        class FinishedEvent

        class Error
    }
}

package "Tests" {
    class Test
}

class ViewModelBase <<abstract>> {}

class App {}

class MainWindow {}

class MainWindowViewModel {}

class MapEditWindow {}

class MapEditWindowViewModel {}

class ConfigEditWindow {}

class ConfigEditWindowViewModel {}

class Test {}

class WareHouse {
    +Tasks : Task*
    +Robots : Robot*
    +Tick : EventHandler
    +SumCost : AtomicInteger
    +SumTime : AtomicInteger
    +Scheduler : Timer
    +ChangeTarget(r : int, t : int)
    -CalculatePath(r : Robot, t : Task) : Action*
    -OnTick(sender : object?, e : EventArgs)
}

enum Strategy {
    DFS
}

enum Direction {
    north, east, south, west

    {static}+ClockWise() : Direction {extension}
    {static}+CounterClockWise() : Direction {extension}
}

enum Action {
    F, R, C, W, T
}

class IEvent <<abstract>> {
    +TaskId : int
    +Step : int
}
class AssignmentEvent {
    +ToString() : string {override}
}
class FinishedEvent {
    +ToString() : string {override}
}

class Error {
    +R1Id : int {readonly}
    +R2Id : int {readonly}
    +Step : int {readonly}
    +Type : string {readonly}
}

class Config {
    -mapFile : string
    -agentFile : string
    -teamSize : int
    -taskFile : string
    -numTasksReveal : int
    -taskAssignmentStrategy : string
    {static} +Load(path : string) : Config
}

class Board {
    -Type : string
    +Width : int
    +Height : int
    +Map : IMapObject[,]
    {static} +Load(path : string) : Board
    +this[int x, int y]() : IMapObject {operator}
}

class LogFile {
    -Events : IEvent*
    -Errors : Error*
    -PlannerTimes : double*
    -previous : DateTime
    +LogError(r1, r2, t : int, msg : string)
    +LogEvent(event : IEvent)
    +Save(path : string)
    {static} +Load(path : string)
}

interface IMapObject {}

class Wall <<singleton>> {}

class Robot {
    +Id : int {readonly}
    +Start : int x int {readonly}
    +Position : int x int
    +Direction : Direction
    +Task : Task
    +Path : Action*
    +History : Action*
    +Robot(x : int, y : int, i : int, j : int, wh : WareHouse, a : Action*)
    +Step()
    +Assign(task : Task)
    +ModifyPath()
    +ChangeTarget()
}

class Task {
    +Id : int {readonly}
    +Goal : int x int {readonly}
    +Assigned : bool {readonly}
    +Robot : Robot? {readonly}
    ~Assign(r : Robot)
    ~Unassign()
}

App o-- MainWindow
App o-- MapEditWindow
App o-- ConfigEditWindow

ViewModelBase <|-up- MainWindowViewModel
ViewModelBase <|-up- MapEditWindowViewModel
ViewModelBase <|-up- ConfigEditWindowViewModel

MainWindow o-left- MainWindowViewModel
MapEditWindow o-down- MapEditWindowViewModel
ConfigEditWindow o-down- ConfigEditWindowViewModel

MainWindowViewModel o-down- WareHouse

WareHouse -down- Test : tests <

WareHouse o-up- Config
WareHouse o-up- Board
WareHouse o-up- LogFile

IMapObject <|-up- Wall
IMapObject <|-- Robot

IEvent <|-down- AssignmentEvent
IEvent <|-down- FinishedEvent

@enduml